package ca.spaz.util;import java.io.*;import java.util.*;import javax.xml.parsers.*;import org.w3c.dom.*;import org.xml.sax.SAXException;/** * Handles the storage and retrieval of program Settings. * A little more friendly to use than Properties and more * flexible than Java Preferences for general use. *  * XML File format used as persistant store. * HashTable of key/values is underlying metaphor for use. * * @author Aaron Davidson <davidson@cs.ualberta.ca> */public class Settings implements Serializable {	private Hashtable map = new Hashtable();	private File file;   private Vector listeners;	private boolean dirty = false;		public Settings() { }      public Settings(Settings p) {      this.dirty = p.dirty;      this.file = p.file;      this.map = new Hashtable(p.map);   }		/**	 * Create a new set of Settings from a given file.	 * @param f the file name storing Settings	 */	public Settings(File f) {		this.file = f;		loadSettings(file);	}		/**	 * Create a new set of Settings from a given file.	 * @param fname the file name storing Settings	 */	public Settings(String fname) {		this.file = new File(fname);		loadSettings(file);	}	public boolean isEmpty() {		return (map.size() == 0);	}		public void clearAll() {		map.clear();	}	public String[] keys() {      Set s = map.keySet();      return (String[])s.toArray(new String[s.size()]);   }	/**	 * given a key Setting name, obtain its value.	 * @param name the name of the Setting.	 * @param def the default to return if value is not present	 * @return the value of the Setting	 */	public synchronized String getSetting(String name, String def) {		String s = (String)map.get(name);		if (s == null) return def;		return s;	}		/**	 * given a key Setting name, obtain its value.	 * @param name the name of the Setting.	 * @return the value of the Setting or null if not found	 */	public synchronized String getSetting(String name) {		return (String)map.get(name);	}		/**	 * given a key Setting name, obtain its value as an int.	 * @param name the name of the Setting.	 * @return the value of the Setting	 */	public synchronized int getInt(String name, int def) {		String s = getSetting(name);		if (s != null) {			return Integer.parseInt(s);      } else {			return def;      }	}         /**    * given a key Setting name, obtain its value as an int.    * @param name the name of the Setting.    * @return the value of the Setting    */   public synchronized long getLong(String name, long def) {      try {         String s = getSetting(name);         if (s != null) {             return Long.parseLong(s);         } else {            return def;         }      } catch (Exception e) {         return def;      }   }	/**	 * given a key Setting name, obtain its value as an int.	 * @param name the name of the Setting.	 * @param def the default value to return if it is not present	 * @return the value of the Setting	 */	public synchronized double getDouble(String name, double def) {		String str = this.getSetting(name);		if (str == null) return def;		return Double.parseDouble(str);	}		/**	 * given a key Setting name, obtain its value as a boolean value.	 * @param name the name of the Setting.	 * @return the value of the Setting	 */	public synchronized boolean getBoolean(String name, boolean bool) {		String str = this.getSetting(name);		if (str == null) return bool;		return str.equals("true");	}	   public synchronized String get(String name, String def) {      return getSetting(name, def);   }  	/**		 * Set a Setting.	 * @param name name of the Setting to set	 * @param val value of the Setting to set	 */	public synchronized void set(String name, String val) {		map.put(name,val);		dirty = true;      fireSettingChangeEvent(name, val);	}				/**		 * Set a Setting.	 * @param name name of the Setting to set	 * @param val value of the Setting to set	 */	public synchronized void set(String name, int val) {      set(name, Integer.toString(val));		dirty = true;	}	   /**       * Set a Setting.    * @param name name of the Setting to set    * @param val value of the Setting to set    */   public synchronized void set(String name, long val) {      set(name, Long.toString(val));      dirty = true;   }   	/**		 * Set a Setting.	 * @param name name of the Setting to set	 * @param val value of the Setting to set	 */	public synchronized void set(String name, boolean val) {      set(name, Boolean.toString(val));		dirty = true;	}	/**		 * Set a Setting.	 * @param name name of the Setting to set	 * @param val value of the Setting to set	 */	public synchronized void set(String name, double val) {      set(name, Double.toString(val));		dirty = true;	}	/**	 * Flush current Settings to disk.	 */	public synchronized void save(String fName) {		this.file = new File(fName);		save();	}   	/**    * Flush current Settings to disk.    */	public synchronized void save() {		try {         PrintStream ps = new PrintStream(               new BufferedOutputStream(new FileOutputStream(file)));         writeXML(ps);			ps.close();		} catch (IOException e) {			e.printStackTrace();		}		dirty = false;	}	      public synchronized void writeXML(PrintStream out) {      XMLNode node = new XMLNode("settings");      Enumeration e = map.keys();      while (e.hasMoreElements()) {         String key = (String)e.nextElement();         XMLNode sNode = new XMLNode("setting");         sNode.addAttribute("name", key);         sNode.addAttribute("value", getSetting(key));         node.addChild(sNode);      }      node.write(out);   }   public String toString() {      return toString('\n');	}      public synchronized String toString(char separator) {      StringBuffer sb = new StringBuffer();      Enumeration e = map.keys();      while (e.hasMoreElements()) {         String k = (String)e.nextElement();         sb.append(k);         sb.append('=');         sb.append((String)map.get(k));         sb.append(separator);      }      return sb.toString();   }	   public synchronized void loadSettings(File file) {      if (!file.exists()) return;      try {         InputStream in = new BufferedInputStream(new FileInputStream(file));         loadSettings(in);         in.close();      } catch (Exception e) {         e.printStackTrace();      }         }   	/**    * Load Settings fresh from disk     */	public synchronized void loadSettings(InputStream in) {      try {         DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();         dbf.setNamespaceAware(true);         DocumentBuilder db = dbf.newDocumentBuilder();         Document d = db.parse(in);         Element e = d.getDocumentElement();                  NodeList nl = e.getElementsByTagName("setting");         for (int i=0; i<nl.getLength(); i++) {            Element m = (Element)nl.item(i);            set(m.getAttribute("name"), m.getAttribute("value"));         }      } catch (SAXException e) {         e.printStackTrace();      } catch (IOException e) {         e.printStackTrace();      } catch (ParserConfigurationException e) {         e.printStackTrace();      } 		dirty = false;	}   	public String getFileName() {		if (file != null) {			return file.getAbsolutePath();		} else {			return null;		}	}	public File getFile() {		return file;	}		public synchronized void remove(String name) {		map.remove(name);		dirty = true;	}		public boolean isDirty() {		return dirty;	}	public void setDirty(boolean val) {		dirty = val;	}      private synchronized Vector getListeners() {      if (listeners == null) {         listeners = new Vector();      }      return listeners;   }      public synchronized void addSettingChangeListener(SettingsChangeListener l) {      getListeners().add(l);   }      public synchronized void removeSettingChangeListener(SettingsChangeListener l) {      getListeners().remove(l);   }      public synchronized void fireSettingChangeEvent(String key, String val) {      if (listeners != null) {         SettingsChangeEvent event = new SettingsChangeEvent(this, key, val);         for (int i=0; i<listeners.size(); i++) {            ((SettingsChangeListener)listeners.get(i)).settingChange(event);         }      }   }   }